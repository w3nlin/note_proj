<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
<style>


*{
	box-sizing:border-box;
}
img{
			display:inline-block;
			max-width:100%;
			margin:0;
			
		}
#main{
	position:relative;
	width:100%;
}

.part_right{
	width:80%;
	position:absolute;
	right:0;
	top:0;
}
.part_right>div{
border:1px solid red;
width:100%;
/*height:300px;*/
border:20px solid black;
}

.part_right>div>img{

width:100%;
margin:0 auto;
display:inline-block;
}
h2{
	font-size:50px;
	padding-left:20px;
}


.part_left{
	width:20%;
	/*
	position:fixed;
	left:0;
	top:0;
	overflow:auto;
*/
	position:   fixed;
        top:        0;
        bottom:     0;
        left:       0;
        right:      0;
        border:     1px solid black;
        overflow:   hidden;
        background: white;
}
.a_box{
	
	word-wrap: break-word;
	word-break: break-all;
	overflow:auto;

    max-height: 98%;      /*这个词是重点*/
	
}
.a_group{
	
}
.a_group>a{
	display:block;
	margin:10px 0;
}
pre{
		width:100%；
		padding:0;
		white-space: pre-wrap;
		word-wrap: break-word;
		}
</style>
<script src="jquery-1.9.1.min.js"></script>
</head>
<body>
<div id="main">
<div class="part_left">
<h1>angular_day07</h1>
	<div class="a_box">
		<div class="a_group">
			<a href="#d1">01.复习</a>
			<a href="#d2">1.React核心概念之一 —— JSX</a>
			<a href="#d3">2.React核心概念之二 —— Component</a>
			<a href="#d4">3.组件中的事件绑定</a>
			<a href="#d5">4.组件中的属性/数据绑定——React核心概念之三 —— state</a>
			<a href="#d6">5.组件中的选择/循环</a>
			<a href="#d7">6.组件间数据传递——React核心概念之四 —— props</a>
			<a href="#d8">7.React核心概念之五 —— ref / refs</a>
			<a href="#d9">8.React核心概念之六 —— 受控组件</a>
			<a href="#d10">9.课后任务</a>
		</div>
	</div>
</div>
<div class="part_right">
<div>
	<h2 id="d1">01.复习</h2>
	<pre>
		React是由Facebook维护的一个用于构建UI界面库，核心更加简单，生态圈很丰富(React、React-Router、Redux、React Native、React360等 ——  Github：awesome react)。
		使用React的两种方法：
		(1)SCRIPT脚本引入式
		(2)React CLI脚手架方式

		面试题：请问三大框架是如何提高DOM操作效率的？
		Vue.js：Virtual DOM，虚拟DOM
		Angular：Dirty Check，脏检查   
		React：Virtual DOM，虚拟DOM
		React中所有的DOM操作底层：都不是直接修改DOM树！而是React在内存中保存了一份DOM树副本——称为虚拟DOM树，所有的render操作都是针对虚拟DOM树进行；只要虚拟DOM树发生改变，就会执行 DIFF 算法，把虚拟DOM与真实DOM之间的不同点绘制到真实DOM——用空间(更多的内存)换时间(DOM效率提高)
	</pre>
</div>
<div>
	<h2 id="d2">1.React核心概念之一 —— JSX</h2>
	<pre>
		let element = React.createElement('div',{},'hello')
		  let element = < div className="" >hello< /div >
		  项目中可以不使用JSX，但是使用了会更加简单！
		  JSX：JavaScriptXML，本质是JS！语法采用了XML语法，使用需要注意：
		  ①标签必须结束！
		  ②HTML标签名必须纯小写；自定义标签名必须首字母大写
		  ③标签的属性都是JS DOM元素的Property，不是HTML元素的Attribute，所以class必须className
		  ④一段JSX必须有且只有一个根元素
		  ⑤一段JSX可以用JS中的 ( ) 括起来
		  ⑥JSX中可以使用表达式来进行运算
			{ uname } 
			{ 2+3 }
			{ n1>n2 ? '是' : '否' }
			{ sum(1, 2) }
			{ (function(){})() }
			{ new Date().getTime() }

	</pre>
</div>
<div>
	<h2 id="d3">2.React核心概念之二 —— Component</h2>
	<pre>
	  组件：就是一段可以反复使用的页面片段； 
	  组件 = 脚本 + 模板 + 样式
	  class MyC01 extends React.Component{
		render(){
			//return  React.createElement()
			//return  JSX
		}
	  }
	  //使用自定义组件
	  < MyC01 >< /MyC01 >

	提示：React手册中提供了两种创建自定义组件的方式
	(1)function式：简单功能少
	   function MyButton(){ }
	(2)class式：复杂功能多
	  class MyButton extends React.Component{  }
	</pre>
</div>
<div>
	<h2 id="d4">3.组件中的事件绑定</h2>          
	<pre>
		  React组件中的事件绑定语法是React所特有的！
		  ①事件名必须 onXxx
		  ②事件监听必须是一个 function，不能是函数调用，不能加( )
		  ③事件监听函数必须用{ }括起来，不能加双引号
		  ④事件处理函数默认有一个实参：Event对象
			< button onClick={ this.goBack } >
		React中事件处理函数中无法获取this的三种解决方法：
		方法1：增加匿名函数 
			   onClick={ ()=>{ this.goBack( ) } }
		方法2：构造方法中绑定this的指向
			   constructor(){
					super( )
					this.goBack = this.goBack.bind(this)
			   }
		方法3：监听函数赋值为对象的属性，属性值是一个“箭头函数”
			  goBack = ()=>{  
					//箭头函数中的this指向不会改变
			  }
		练习：在#box渲染两个按钮，“登录”和“注册”，两个单击事件监听方法只需要输出this即可
		练习：自定义组件MyInput, 渲染一个输入框，提示用户输入“搜索关键词”，试着监听其“内容改变”事件，并输出最新的输入内容——提示：React中没有v-model/ngModel指令 ，监听表单元素值改变只能监听onChange
	</pre>
</div>

<div>
	<h2 id="d5">4.组件中的属性/数据绑定——React核心概念之三 —— state</h2>          
	<pre>
		提示：React中绑定的数据不能简单的是class属性！其采用的策略类似于Vuex——数据保存在状态中(state)
		  ①创建数据状态
			this.state = { age:20 }  //只能在构造方法中创建
		  ②绑定数据状态
			this.state.age
		  ③修改数据状态
			//this.state.age = 30;  //无效的修改
			this.setState({age: 30})
		  提示：setState( obj, fn )方法是“异步”执行的——不会立即执行；如果想在状态数据修改完毕后执行特定的处理，可以使用第二个回调函数参数

		练习：自定义组件MyBuyCount, 渲染如下组件内容：
		<img src="./images/2_01.png"/>
		练习：自定义组件MyTodoList, 渲染如下组件内容：
		<img src="./images/2_02.png"/>	 
	</pre>
</div>

<div>
	<h2 id="d6">5.组件中的选择/循环</h2>
	<pre>
		无内容
	</pre>
</div>

<div>
	<h2 id="d7">6.组件间数据传递——React核心概念之四 —— props</h2>
	<pre>
		每个组件都可以声明自定义属性（Angular中称为“输入属性”）
		  < MyInputGroup  labelTxt="xx"  inputId="yy"/ >
		  React中组件可以直接使用this.props (Property)读取自己接收到父组件给与的全部输入属性值（自定义属性无需提前声明）。例如：this.props.labelTxt；子组件也可以通过this.props读取父组件传给自己的处理函数，用于把子组件中的数据传递给父组件加以使用
		  < MyInputGroup  doInputChange={this.doUnameChange}/ >

		React父子组件间数据传递：
		(1)父 -> 子： Props Down
		(2)子 -> 父： Props Up
	</pre>
</div>

<div>
	<h2 id="d8">7.React核心概念之五 —— ref / refs</h2>
	<pre>
		Angular组件脚本查找子组件使用的是@ViewChild
		Vue.js/React组件脚本中查找子组件都使用“对象引用”： ref
			< any  ref="myChild01" >
			this.refs.myChild01....  此对象及为组件/元素对象

	</pre>
</div>

<div>
	<h2 id="d9">8.React核心概念之六 —— 受控组件</h2>
	<pre>
		由React所渲染的所有 input、select、textarea 表单元素，都做了特殊的处理，称为“受控组件”——只要提供了value但没有提供onChange事件处理方法，输入项都是只读的；特点如下：
		  ①只要 value 属性赋值为一个常量，此值就无法由用户修改 
		  ②只要 value 属性赋值为一个状态变量，但未提供onChange处理方法，此值就无法由用户修改 
		  ③受控组件要求用户必须监听onChange事件，在其中对用户输入进行检查，合格的数据最终要赋值为 state 数据，从而影响输入框的值

	</pre>
</div>

<div>
	<h2 id="d10">9.课后任务</h2>
	<pre>
		(1)整理React核心概念思维导图：
			JSX / Component / state / props / ref / 受控组件
		(2)自学：React组件的生命周期（注意废弃的钩子函数）
		    https://segmentfault.com/a/1190000015025236
		(3)使用React完成“学生管理系统”
		<img src="./images/2_03.png"/>
	</pre>
</div>








</div>
</div>
</body>

</html>
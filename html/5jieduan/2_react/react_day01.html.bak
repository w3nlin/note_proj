<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
<style>


*{
	box-sizing:border-box;
}
img{
			display:inline-block;
			max-width:100%;
			margin:0;
			
		}
#main{
	position:relative;
	width:100%;
}

.part_right{
	width:80%;
	position:absolute;
	right:0;
	top:0;
}
.part_right>div{
border:1px solid red;
width:100%;
/*height:300px;*/
border:20px solid black;
}

.part_right>div>img{

width:100%;
margin:0 auto;
display:inline-block;
}
h2{
	font-size:50px;
	padding-left:20px;
}


.part_left{
	width:20%;
	/*
	position:fixed;
	left:0;
	top:0;
	overflow:auto;
*/
	position:   fixed;
        top:        0;
        bottom:     0;
        left:       0;
        right:      0;
        border:     1px solid black;
        overflow:   hidden;
        background: white;
}
.a_box{
	
	word-wrap: break-word;
	word-break: break-all;
	overflow:auto;

    max-height: 98%;      /*这个词是重点*/
	
}
.a_group{
	
}
.a_group>a{
	display:block;
	margin:10px 0;
}
pre{
		width:100%；
		padding:0;
		white-space: pre-wrap;
		word-wrap: break-word;
		}
</style>
<script src="jquery-1.9.1.min.js"></script>
</head>
<body>
<div id="main">
<div class="part_left">
<h1>angular_day07</h1>
	<div class="a_box">
		<div class="a_group">
			<a href="#d1">01.复习</a>
			<a href="#d2">1.React</a>
			<a href="#d3">2.React核心概念之一 —— JSX</a>
			<a href="#d4">3.React核心概念之二 —— 组件</a>
			<a href="#d5">4.课后任务</a>
		</div>
	</div>
</div>
<div class="part_right">
<div>
	<h2 id="d1">01.复习</h2>
	<pre>
		见思维导图

		补充：Ionic项目
		Angular & Ionic 阶段项目
		 实现步骤：
		 (1)创建空白的Ionic项目模板
		 (2)创建项目必需的组件
			ng  g  component   main			盛放页签组件的页面
			ng  g  component   index			首页(1F/2F/3F)
			ng  g  component   product-list		商品列表页
			ng  g  component   cart			购物车页
			ng  g  component   login			登录页
			ng  g  component   not-found		404页
			ng  g  component   product-detail	商品详情页
		  确保每个组件都在app.module.ts中进行了声明：declarations	
		 (3)修改根组件模板app.component.html，使用MainComponent(其中要创建页签组件)
			< ion-app >
				< ion-router-outlet >< /ion-router-outlet >
				< app-main >< /app-main >
			< ion-app >
		 (4)编辑main.component.html，声明页签组件
			< ion-tabs >
				< ion-tab-bar >
					< ion-tab-button  tab="路由地址" >图标+文字< /ion-tab-button >
				< /ion-tab-bar >
			< /ion-tabs >
		 (5)编辑路由配置模块文件app-routing.module.ts，声明并注册路由词典
			const routes = [
				{path: '', component: IndexComponent},
				{path: 'product-list', component: ProductListComponent},
				{path: 'product-detail/:pid', component: ProductDetailComponent},
				{path: 'cart', component: CartComponent},
				{path: 'login', component: LoginComponent},
				{path: '**', component: NotFoundComponent},
			];
		   此时可以使用客户端进行测试，访问页签中的每个按钮，可以在路由出口显示对应路由组件页面
		-------------------------------------------------------------------------------
		  (6)开始修改主页组件模板：index.component.html，添加页面内容
			< ion-header >
				img  +  ion-searchbar
			< /ion-header >
			< ion-content >
				slides  +  ion-item  +  ion-grid>ion-card + .....
			< /ion-content >
			模型数据：carouselItems、recommendedITem、topSaleItems、newArrialItem、mySlides、http
		--------------------------------------------------------------------------------
		  (7)修改商品列表页模板：product-list.component.html，添加页面内容
			< ion-header >
				ion-button  +  ion-searchbar
			< /ion-header >
			< ion-content >
				ion-card>ion-item   +  ion-infinite-scroll  +  ion-button
			< /ion-content >
			模型数据：productList、pno、hasMore、http
		--------------------------------------------------------------------
		  (7)修改商品详情页模板：product-detail.component.html，添加页面内容
			< ion-header >
				ion-button  +  ion-title  +  ion-button
			< /ion-header >
			< ion-content >
				ion-item   +  ion-slides  +  ion-card > ion-item
			< /ion-content >
			模型数据：pid、product、http、mySlides 

		面试题：
		(1)解释跨域请求？
		(2)跨域请求解决方案？    ①JSONP    ②CORS    ③服务器端代理  

		HTML元素属性(Attribute) 和 JS DOM对象的属性(Property)
		①元素属性和对象属性同名：
		  < img  src="xxx" >
		  document.createElement('img').src="xxx"
		②元素属性和对象属性不同名：
		  < input  class="box"  tabindex="3" >
		  document.createElement('box').className="box"
		  document.createElement('box').tabIndex="3"
		③元素属性在对象属性中不存在：
		  < td colspan="3" >
		  document.createElement('td').colSpan="box"
		④对象属性在元素属性中不存在
		  document.createElement('div').innerHTML = 'abcd'
		  < div  innerHTML="" >



		Vue.js   Angular  React

	</pre>
</div>
<div>
	<h2 id="d2">1.React</h2>
	<pre>
		由Facebook维护的用于构建用户界面的 JavaScript 库，是三个框架中最简单的；但是React的生态圈很大：
		  React：核心
		  React-Router：路由
		  Redux：状态管理
		  React Native：移动App
		  ReactVR/React360：VR开发

		使用React有两种方式：
		(1)SCRIPT脚本引入式：可以在任意单一HTML页面使用
		(2)React脚手架方式：适合于创建大型Web应用/SPA应用

		练习：创建一个myp02.html页面，容器#box
		使用React在#box中渲染如下内容：   
			< p class="danger" >
				AA
				< span class="strong" >BB< /span >
				CC
			< /p >


	</pre>
</div>
<div>
	<h2 id="d3">2.React核心概念之一 —— JSX</h2>
	<pre>
		  JavaScript XML：由React定义的融合了XML语法的JS代码——本质还是JS，只是语法外观上像XML！
		  浏览器不能直接运行JSX语法！需要使用JSX编译器，转换为浏览器可以执行的JS语法： Babel —— 第三方提供的JS编译器！
		  在页面中运行Babel解释器：
			< script src="js/babel.js" >< /script >
			< script type="text/babel" >
				//JSX语句
			< /script >

		  JSX语法：
		  ①外观像是XML(标签必须闭合，属性值必须用引号，根元素有且只有一个)
		  ②JSX本质不是标签，而是在创建JS对象；属性都是JS DOM属性，而不是HTML标签属性，如class必须写作className、for必须写作htmlFor
		  ③JSX中使用的HTML标签都必须用纯小写形式！自定义标签都必须采用大驼峰命名法！
		  ④JSX中若遇到 < 则会运行HTML解释器；遇到 { 则会运行JS解释器
		  ⑤JSX中的表达式语法： { express }，其中的表达式可以是：
			变量名？ 算术运算？ 比较运算(无错但也无输出)？ 逻辑运算(无错但也无输出)？ 三目运算？ 调用函数？ 调用对象的方法？ 创建新的对象（但可以创建完对象立即调用其成员）？ 选择语句(但可以嵌入在匿名自调函数中——唯一的选择语句写法)？  循环语句(普通的for不行但可以使用arr.map(fn))？

		提示：React JSX中没有类似Angular中的ngIf和ngFor指令（React中没有指令的概念），在JSX中可以在 { } 执行函数以返回 if..else..的不同结果，也可以在 { } 执行 arr.map( fn )已返回每个元素遍历后返回的处理结果


		练习：创建一个myp04.html页面，容器#box
		使用React在#box中渲染如下内容：   
			< form action="do.php" >
				< label >用户名：< /label >< input name="uname" >
				< label >密码名：< /label >< input name="upwd" >
				< button type="submit" >提交< /button >
			< /form >
		练习：创建一个myp05.html页面，容器#box
			创建变量 hasMore，值为true就在#box渲染一个：
				< div >加载中，请稍候...< /div >
			值为false渲染一个：
				< button >没有更多数据了< /button >
		练习：创建一个myp06.html页面，容器#box
			创建变量 productList，其中保存四个商品的名称，
			在页面中渲染一个ul>li*4呈现数组中的数据

	</pre>
</div>
<div>
	<h2 id="d4">3.React核心概念之二 —— 组件</h2>          
	<pre>
		  Component：是一段可复用的页面内容
		  React中声明组件的语法： 
		  class  MyComponent  extends  React.Component{
			render(){
				return (
					//JSX表达式
				)
			}
		  }
		  ReactDOM.render( < MyComponent / >,  box  )
		  提示：①React中的自定义组件必须继承自React.Component  ②自定义组件中使用render()方法返回组件的模板  ③自定义组件名首字母必须大写(推荐全驼峰法则)；而JSX中的html标签必须使用纯小写形式

	</pre>
</div>

<div>
	<h2 id="d5">4.课后任务</h2>          
	<pre>
		(1)继续完善“学子商城 Ionic 版”
		(2)自定义组件 TodoList，实现“待办事项列表”
		 <img src="./images/01.png"/>
		提示：事件绑定、组件状态数据绑定需要阅读参考手册完成

	</pre>
</div>






</div>
</div>
</body>

</html>
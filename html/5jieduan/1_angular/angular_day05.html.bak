<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
<style>


*{
	box-sizing:border-box;
}
#main{
	position:relative;
	width:100%;
}

.part_right{
	width:80%;
	position:absolute;
	right:0;
	top:0;
}
.part_right>div{
border:1px solid red;
width:100%;
/*height:300px;*/
border:20px solid black;
}

.part_right>div>img{

width:100%;
margin:0 auto;
display:inline-block;
}
h2{
	font-size:50px;
	padding-left:20px;
}


.part_left{
	width:20%;
	/*
	position:fixed;
	left:0;
	top:0;
	overflow:auto;
*/
	position:   fixed;
        top:        0;
        bottom:     0;
        left:       0;
        right:      0;
        border:     1px solid black;
        overflow:   hidden;
        background: white;
}
.a_box{
	
	word-wrap: break-word;
	word-break: break-all;
	overflow:auto;

    max-height: 98%;      /*这个词是重点*/
	
}
.a_group{
	
}
.a_group>a{
	display:block;
	margin:10px 0;
}
</style>
<script src="jquery-1.9.1.min.js"></script>
</head>
<body>
<div id="main">
<div class="part_left">
<h1>angular_day05</h1>
	<div class="a_box">
		<div class="a_group">
			<a href="#d1">01.复习</a>
			<a href="#d2">02.练习</a>
			<a href="#d3">1.路由词典配置</a>
			<a href="#d4">2.路由跳转</a>
			<a href="#d5">3.路由参数</a>
			<a href="#d6">4.路由嵌套</a>
			<a href="#d7">5.路由守卫</a>
			<a href="#d8">6.基于Angular的UI组件库</a>
			<a href="#d9">7.课后任务</a>
		</div>
	</div>
</div>
<div class="part_right">
<div>
	<h2 id="d1">01.复习</h2>
	<pre>
		见思维导图
	</pre>
</div>
<div>
	<h2 id="d2">02.练习</h2>
	<pre>
		0)创建如下四个组件：
		ng  g   component   index
		ng  g   component   productList
		ng  g   component   productDetail
		ng  g   component   userCenter
		ng  g   component   notFound
	1)创建路由词典，为每个组件分配访问路径
		index		=>    	index
		productList	=>		product/list
		productDetail	=>		product/detail	
		userCenter	=>		user/center
		let  routes = [  {path:'', component: .. },... ]
	2)在根模块中注册路由词典
		RouterModule.forRoot(  routes  )
	3)在根组件中声明路由出口
		app.component.html:    < router-outlet >< /router-outlet >
	4)使用客户端访问每个路由地址，测试路由功能实现
		http://127.0.0.1:4200/user/center
	</pre>
</div>
<div>
	<h2 id="d3">1.路由词典配置</h2>
	<pre>
	 let routes = [
	  {path:'', component:IndexComponent},
	  {path:'index', component:IndexComponent},
	  {path:'product/list', component:ProductListComponent},
	  {path:'product/detail', component:ProductDetailComponent},
	  {path:'user/center', component:UserCenterComponent},
	  {path:'**', component:NotFoundComponent},
	]
	注意：路由词典中的路由path不能以 '/' 开头！但是，路由跳转时指定的路径最好都以 '/' 开头！
  
		 


	</pre>
</div>
<div>
	<h2 id="d4">2.路由跳转</h2>          
	<pre>
	  从一个路由地址跳转到另一个有两种方法：
		  方式1：编程方式
			contructor( private router: Router ){ }
			...
			this.router.navigateByUrl( '...' )
		  方式2：模板方式
			< any  routerLink="..." >
			注意：routerLink指令可以用在任何元素上，如DIV、A、BUTTON
	</pre>
</div>

<div>
	<h2 id="d5">3.路由参数</h2>
	<pre>
	  在路由的path属性中，有些部分固定不变，有些部分需要动态变化：
		{  path:  'product/detail/20',  component: ...  }
		{  path:  'product/detail/23',  component: ...  }
		{  path:  'product/detail/35',  component: ...  }
	  -----------------------------------------------------------------
		{  path:  'product/detail/:pid',  component: ...  }
	  路由参数：路由地址中的变量
	  使用步骤：
	  ①路由词典中设置 路由参数：
		{ path:  'product/detail/:pid',  }
	  ②路由跳转时提供 路由参数值：
		< any routerLink="/product/detail/35" >
	  ③在目标组件中读取当前路由的参数
		constructor( private route: ActivatedRoute ){  }
		ngOnInit(){
			this.route.params.subscribe( (data)=>{
				data.pid  就是路由参数的值
			})
		}


		午间任务：完整的实现“商品列表”和“商品详情”两个组件的功能：
		获取商品列表的服务器端API:
		http://www.codeboy.com/data/product/list.php
		获取商品详情的服务器端API:
		http://www.codeboy.com/data/product/details.php?lid=35 
	</pre>
</div>

<div>
	<h2 id="d6">4.路由嵌套</h2>
	<pre>
	  在一个路由组件内部，有部分内容固定，另一区域中的内容可以切换不同的子组件 —— 嵌套路由
	  路由词典：
	  let  routes = [
		{ 
			path: 'user/center',
			component: UserCenterComponent,
			children: [	
				{ path: 'myinfo', component: ...},
				{ path: 'headpic', component: ...},
				{ path: 'security', component: ...},
			]
		}
	  ]
	  路由出口：
			app.component.html:   < router-outlet >< /router-outlet >
			user-center.component.html:   ....< router-outlet >< /router-outlet >....

		练习：为“用户中心”创建嵌套路由
		(0)创建必需的子组件
			ng   g   component   myInfo
			ng   g   component   headPic
			ng   g   component   securityManagement
		(1)修改路由词典，为“用户中心”路由添加嵌套路由
		(2)修改“用户中心”模板，添加嵌套路由的出口

	</pre>
</div>

<div>
	<h2 id="d7">5.路由守卫</h2>
	<pre>
		Guard：护卫，守护者
		  有些路由地址只有在特定条件满足的情况下才允许访问，不满足的情况下禁止访问——如是否登录、是否充值、是否满足时间段限制....
		  对访问条件是否满足而进行设置，满足的话，就让访问路由组件；否则就不让访问 —— 这种对象成为“路由守卫对象”。
		  使用方法：
		  ①创建一个路由守卫：
			@Injectable({		providedIn: 'root'	})
			class  XxxGuard  {
				canActivate(){	//组件是否允许被激活
					......
					return true / false ;  		
				}
			}
		  ②使用路由守卫
			[{
					path: 'user/center', 
					component: UserCenterComponent,
					canActivate: [  XxxGuard ]
					children: [ ... ]
			}]
		练习：创建一个路由守卫： TimeCheckGuard，
			作用：如果当前时间是18:00~24:00，允许用户访问user/center，否则禁止访问

		移动端应用的种类：
		(1)Native App：
		  原生App，指使用Java/Kotlin为Android、OC/Swift为iOS开发应用程序，直接运行与手机操作系统上
		  优势：运行速度快     劣势：两套代码不跨平台，且必须下载
		(2)Web App：
		  使用HTML/CSS/JS技术编写类似原生App的应用，代码运行于手机中的浏览器(如WebView)中
		  优势：无需提前下载、一套代码到处运行  劣势：运行效率低、不能访问手机底层系统服务
		(3)Hybrid App：
		  使用HTML/CSS/JS技术编写类似原生App的应用，并混入部分Java/OC等驱动代码以调用系统底层服务，最终运行于操作系统中
		  优势：结合了前两种的优势
		(4)Dart / Flutter —— 代表着未来   


	</pre>
</div>

<div>
	<h2 id="d8">6.基于Angular的UI组件库</h2>
	<pre>
		Angular相关的组件库：
		(1)Ionic
		(2)Material
		(3)Zorro
		(4)Zorro Mobile

	 Ionic概述：https://ionicframework.com/
	 Ionic是一个基于HTML/CSS/JS技术的，创建混合App的UI组件库技术。底层可以不依赖于任何框架(引入.css和.js就可以运行)，也可以与Vue.js、React、Angular框架整合在一起，作为它们的第三方组件库使用。
	  使用方法：
	  (1)下载全局脚手架工具    
		npm  i   -g   ionic
	  (2)选择一个目录，运行脚手架工具在当前目录下创建一个项目
		ionic  start   项目名   blank
		ionic  start   项目名   tabs
		ionic  start   项目名   sidemenu
		创建好项目后会自动调用npm  i下载所依赖的第三方模块
	  (3)进入项目目录，运行它
		cd  项目名
		npm  start
	  (4)用(手机)浏览器访问项目
		http://127.0.0.1:4200

	</pre>
</div>

<div>
	<h2 id="d9">7.课后任务</h2>
	<pre>
		(1)复习：整理完整版Angular知识点思维导图
		(2)(如果能上网的话)安装Ionic CLI脚手架工具，创建三个不同类型的项目：①空白项目、②页签式导航项目、③侧边菜单项目
		(3)查看Ionic项目的目录结构，查找与普通Angular项目的异同
	</pre>
</div>



</div>
</div>
</body>

</html>
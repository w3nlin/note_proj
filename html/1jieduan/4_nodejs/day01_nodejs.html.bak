<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0,minimum-scale=1.0,user-scalable=0" />
    <title></title>
    <style>
		div#main_title{
			text-align:center;
			font-size:60px;
			font-weight:bold;
		}
		div.box{
			border:2px solid black;
			margin:20px 0;
			border-radius:10px;
			width:100%;
		}
		img{
			display:inline-block;
			max-width:100%;
		}
    </style>
    <script>
        
    </script>
</head>
<body>
<div id="main_title">day01_nodejs</div>

<div class="box">
<h1>学习一门编程语言的基本步骤</h1>
<pre>
 (1)了解背景知识：历史、现状、特点、应用场景
 (2)搭建开发环境，编写hello world
 (3)变量和常量
 (4)数据类型
 (5)运算符
 (6)逻辑结构
 (7)通用小程序
 (8)函数和对象
 (9)第三方库、框架
 (10)实用的项目
</pre>
</div>

<div class="box">
<h1>1.ES6</h1>
<pre>
 (1)函数中的参数
  ES6允许为参数设置默认值，如果没有传递实参，自动调用形参的默认值
 (2)模板字符串
 ` 一组字符串，可以直接写JS  ${js表达式} `
 练习：创建一个对象，保存一个员工的对象(姓名，性别0/1，生日，工资)；使用模板字符串打印员工的信息，性别0显示女，1显示男

</pre>
</div>

<div class="box">
<h1>2.nodejs概述</h1>
<pre></pre>
</div>

<div class="box">
<h1>2.nodejs概述</h1>
<pre>
 nodejs基于谷歌V8引擎，运行在服务器端的语言，基于JS
 对比JS和nodejs
 (1)JS运行在客户端浏览器，存在多个浏览器，容易产生兼容性的问题；nodejs在服务器端只有一个环境，不存在兼容性。
 (2)两者都有内置(ES)对象、自定义对象、宿主对象(根据执行环境的不同划分)
 (3)JS用于网页中的交互效果，nodejs用于服务器的操作，例如web服务器创建，数据库操作，文件操作等
   nodejs.org  英文官网
   nodejs.cn  中文网
 nodejs的特点
   单线程逻辑处理
   非阻塞的异步I/O处理
   支持数万个并发连接
 nodejs的应用场景
   基于社交网络的大规模web应用 
 nodejs不适合CPU密集型的应用
   递归、数据加密解密、数据挖掘和数据分析
 nodejs的执行方式
   脚本模式   node  c:/xampp/.../1.js
   交互模式   
     node  回车   进入交互模式
     两次ctrl+c   或者   .exit    退出交互模式
</pre>
</div>

<div class="box">
<h1>3.全局对象</h1>
<pre>
  全局作用域下的变量就是全局对象下的属性，全局对象下的函数就是全局对象下的方法，可以使用全局对象来访问
  nodejs: global
  在交互模式下，声明的变量和创建的函数都属于全局下的，可以使用global来访问；
  在脚本模式下，声明的变量和创建的函数都不属于全局下的，一个文件默认会创建一个独立的作用域，叫做文件（模块）作用域，防止污染全局。
  js: window
  在浏览器下，文件中声明的变量或者创建的函数都属于是全局作用域下的，会污染全局。
 (1)console对象——控制台
   global.console.log()  打印日志
   global.console.info() 打印消息
   global.console.warn()  打印自定义的警告
   global.console.error()  打印自定义的错误
   global.console.time('自定义字符串')  开始计时
   global.console.timeEnd('自定义字符串')  结束计时
    自定义字符串前后保持一致
 练习：计时查看for、while、dowhile循环10000的耗时
 (2)process对象——进程
  process.arch  查看当前CPU的架构
  process.platform  查看当前的操作系统
  process.env  查看当前系统的环境变量
  process.version  查看当前nodejs的版本号
  process.pid  查看当前的进程编号
  process.kill()   结束某个编号的进程
 (3)Buffer对象——缓冲区
  一块用于临时存储数据的内存区域，可以存储文件数据、网络上传输的资源(视频、在线直播...)
  创建Buffer
     var buf=Buffer.alloc(5, 'abcde')
     buffer数据  <Buffer 61 62 63 64 65>
  将buffer数据转为字符串
     buf.toString()
</pre>
</div>

<div class="box">
<h1>4.模块</h1>
<pre>
 模块就是一个封装好的功能体
 在nodejs下模块分为自定义模块、核心模块(官方提供)、第三方模块
 (1)自定义模块
   在nodejs下，任意一个js文件都是一块模块，文件中的代码默认被一个构造函数所包含
(function(exports,require,module,__filename,__dirname){
  //程序员编写的代码
})
__filename  当前模块的完整路径和文件名称
__dirname  当前模块的完整路径
require()  引入一个模块
module  指代当前的模块对象
module.exports  当前模块导出的对象，包含供其它模块使用的属性和方法
exports  等价于module.exports
 练习：在07_2.js声明变量b，创建函数fn，导出变量和函数。
</pre>
</div>

<div class="box">
<h1>课后任务</h1>
<pre>
  (1)复习今天内容，整理思维导图
  (2)练习
    创建两个模块main.js（主模块），circle.js(功能模块)，在功能模块中创建两个函数，传递1个参数半径，计算圆的周长和面积，导出这两个函数；在主模块中引入功能模块，并调用两个方法
  (3)预习核心模块下的querystring，url，fs
</pre>
</div>
</body>
</html>
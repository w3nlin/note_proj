复习
 复杂查询
 聚合查询/分组查询/子查询/跨表查询
 查询所有男员工的所有列，获取工资最高的前三个人。
 SELECT * FROM emp 
 WHERE sex=1
 ORDER BY salary DESC
 LIMIT 0,3;
 开发环境
   浏览器/NodeJS
 变量  var a=1; 字母、数字、下划线、美元符号，不能以数字开头。
 常量  const PI=3.14;
学习一门编程语言的基本步骤
 (1)了解背景知识：历史、现状、特点、应用场景
 (2)搭建开发环境，编写hello world
 (3)变量和常量
 (4)数据类型
 (5)运算符
 (6)逻辑结构
 (7)通用小程序
 (8)函数和对象
 (9)第三方库、框架
 (10)实用的项目

1.数据类型
 数据分为原始类型和引用类型
 原始类型分为数值型、字符串型、布尔型、未定义型、空
 (1)数值型
  分为整型和浮点型
  整型在内存中占4个字节，浮点型占8个字节
  八进制  以0开头， 例如 013 -> 11
  十六进制  以0X开头，  例如  0XA -> 10
    A~F 代表10~15    不区分大小写
    0XFF -> 255
  浮点型分为普通小数和指数型小数
    3.14E6   ->  31400000
    3.14E-6  ->  0.00000314
  typeof  检测数据类型
 (2)字符串型
  数据被引号包含就是字符串类型，不区分单双引号
    查看任意一个字符的Unicode码
      'a'.charCodeAt()   //97
 (3)布尔型
  true/false
  在程序中表示真或者假
  一般用于是否的结果，例如是否登录，是否注册，是否在售，是否为会员...
 (4)未定义型
  声明了变量未赋值，结果就是undefined
 (5)空——null
  常和引用类型数据一起使用
2.数据类型转换
 (1)隐式转换
   ①数字+字符串   数字转换成字符串
     1+'2'   // '12'
   ②数字+布尔型   布尔型转成数字 true->1 false->0
     3+true  //4
     3+false  //3
   ③字符串+布尔型  布尔型转成字符串
     '5'+true  //'5true'
   JS中加号(+)的作用
     执行加法运算
     执行字符串拼接
   减法(-)、乘法(*)、除法(/) 隐式换行
     将运算符两端的数据转为数值型(自动调用Number)，如果转换失败，返回NaN(Not a Number)，不是一个数字，任何值和NaN执行减乘除运算符都会返回NaN

   练习：查看以下程序的运行结果
    var num1=3,num2=true,num3='tedu';
    console.log(num1+num2+num3);//'4tedu'
    console.log(num2+num3+num1);//'truetedu3'
    console.log(num3+num1+num2);//'tedu3true'
 (2)强制转换
  ①将任意的数据强制转为数值型
    Number()
Number('a');   //NaN
Number('1');   //1
Number('1a');  //NaN
Number(undefined);  //NaN
Number(null);  //0
Number(true);  //1
  ②将数据转为整型
    parseInt()
    常用于将字符串或数字转为整型，其它的数据返回NaN；如果要转换的字符串以非数字开头，也返回NaN
  ③将数据转为浮点型
    parseFloat()
    和parseInt的用法基本一致，只是转的数据是浮点型。
  ④数值型和布尔型转为字符串型
    toString()
    var num=10;
    num.toString();  // '10'

3.运算符
 表达式: 由运算符连接的操作数据，所组成的形式。
 运算符分为算术运算符、比较运算符、逻辑运算符、位运算符、赋值运算符、三目运算符
 (1)算术运算符
   +  -  *  /  %  ++  --
   %   取余
   ++  自增，在原来的基础之上加1
   --   自减，在原来的基础之上减1
  console.log(num++); 先打印num的值，再执行自增
  console.log(++num); 先执行自增，再打印num的值
   练习：
     var num=3;
     console.log(num-- + --num);   
 (2)比较运算符
  >  <  >=  <=  !=  ==  ===(全等于)  !== 全不等于
  返回一个布尔型的值
  ==  只是比较两个值是否相等
  ===  不仅比较值，还会比较类型是否相等
如果数据类型不同，会发生数据类型转换
  3>'10'  字符串转成数字10
  '3'>'10'  两个字符串比较的是Unicode码
  3>'10a'  //false
  3<'10a'  //false
  3=='10a' //false
      '10a'  -> NaN
   NaN和任何值比较(> < >= <= == ===)都返回false
   NaN==NaN  返回false
 (3)逻辑运算符
   或者( || )   关联的两个条件只需要满足其一, 结果是true，否则false
   并且( && )   关联的两个条件都是true，结果是true，否则false  
   非(反向) !    !false -> true   !true -> false
  逻辑短路
   &&  当第一个条件为false的时候，就不需要再执行第二个条件
   ||  当第一个条件为true的时候，就不需要再执行第二个条件
   注意：逻辑短路无需关注最终结果是true还是false，重点是看是否会执行第二个表达式。
   练习：以下程序是否会报错 
 var num=3;
 num>5  &&  console.log(a);
 num<1  ||  console.log(a);
   练习：声明变量保存一个人的年龄，如果满18岁，打印'成年人'
 (4)位运算符(了解)
   在执行运算的时候，计算机会把数据转成二进制进行运算。
 1 10 11  100  101  110  111  1000  1001  1010
    2       4                     8
   100110=100000+100+10
               32  + 4 + 2
   25 = 16+8+1
        10000+1000+1=11001
 按位与( & )  上下两位都是1，结果是1，否则是0
 按位或( | )  上下两位含有1，结果是1，否则是0
 按位异或( ^ )  上下两位不同为1，相同为0
 按位右移( >> )  删除二进制的最后一位或者多位，每次缩小到原来的一半或者更多。
 按位左移( << )  在二进制的最后添加0，成倍增加

课后任务
 (1)复习今天内容，整理思维导图
 (2)练习：
   声明变量保存一个年份，判断这个年份是否为闰年，结合逻辑短路，如果是闰年，打印"闰年".
   闰年：4年一个闰年(能被4整除)，并且不能被100整除，或者能被400整除。
 (3)预习逻辑结构 if  if-else  switch










